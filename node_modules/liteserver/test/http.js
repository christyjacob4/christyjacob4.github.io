/**
 * this testcase based on http
 */
require('./env');
var jsc = require('jscoverage');
var HTTP = require('http');
var fs = require('fs');
var formstream = require('formstream');
jsc.require(module, '../lib/request');
jsc.require(module, '../lib/response');
delete require.cache[require.resolve('../lib/server')];
jsc.require(module, '../lib/server');

var Liteserver = jsc.require(module, '../lib/server');
Liteserver.Log = jsc.require(module, '../lib/log');

var expect = require('expect.js');
var test = require('./test.js');
var urllib = require('urllib');
var serv = test.startServer(Liteserver);
var net = require('net');

describe('SERVER TEST', function () {
  describe('getServer()', function () {
    it('getServer return the server object', function () {
      var ss = serv.getServer();
      expect(typeof ss.listen).to.be('function');
    });
  });
  describe("http functions", function () {
    it('#getRouter', function (done) {
      var url = 'http://localhost:54321/test/act/1/2/3';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        expect(res.controller).to.be('test');
        expect(res.action).to.be('act');
        expect(res.param).to.be.eql([1, 2, 3]);
        done();
      });
    });
    it('#serv.load() load controller', function (done) {
      var url = 'http://localhost:54321/loadedController';
      urllib.request(url, function (err, data) {
        expect(err).to.be(null);
        expect(data.toString()).to.be('this is a test');
        done();
      });
    });
    it('#serv.load() load controller', function (done) {
      var url = 'http://localhost:54321/loadedControllerDir';
      urllib.request(url, function (err, data) {
        expect(err).to.be(null);
        expect(data.toString()).to.be('controller load dir');
        done();
      });
    });
    it('#router test /?abc=123', function (done) {
      var url = 'http://localhost:54321/?abc=%25123';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        expect(res.path).to.be('/?abc=%25123');
        expect(res.get).to.be.eql({abc: '%123'});
        done();
      });
    });
    it('#router queryString with error encode param /?abc=%E4%B8%AD', function (done) {
      var url = 'http://localhost:54321/?abc=%E4%B8%AD';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        expect(res.get).to.be.eql({abc: 'ä¸­'});
        done();
      });
    });
    it('#router *test/', function (done) {
      var url = 'http://localhost:54321/atest';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        expect(res.path).to.be('/atest');
        done();
      });
    });
    it('#router *test.abc', function (done) {
      var url = 'http://localhost:54321/atest.abc';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        expect(res.path).to.be('/atest.abc');
        done();
      });
    });
    it('#router /404', function (done) {
      var url = 'http://localhost:54321/404';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = res.toString();
        expect(res).to.match(/404/);
        done();
      });
    });
    it('#router /500', function (done) {
      var url = 'http://localhost:54321/500';
      urllib.request(url, {}, function (err, res) {
        expect(err).to.be(null);
        res = res.toString();
        expect(res).to.match(/500/);
        expect(res).to.match(/custom/);
        done();
      });
    });
    it('req.getCookie() should return cookie obj', function (done) {
      var url = 'http://localhost:54321/cookie';
      urllib.request(url, {headers: {cookie: 'a=1; b=%25abc'}}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        expect(res.cookie).to.be.eql({a: '1', b: '%abc'});
        expect(res.cookieRaw).to.be('a=1; b=%25abc');
        done();
      });
    });
    it('req.getPost() should return post obj', function (done) {
      var url = 'http://localhost:54321/post';
      var headers = {"content-type": 'application/x-www-form-urlencoded'};
      urllib.request(url, {type: 'POST', data: {a: 1, b: 2}, headers: headers}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        //res = JSON.parse(res.toString());
        expect(res).to.be.eql({a: '1', b : '2'});
        done();
      });
    });
    it('req.getPost() should return post obj when send json', function (done) {
      var url = 'http://localhost:54321/post';
      var headers = {"content-type": 'application/json'};
      urllib.request(url, {type: 'POST', content: JSON.stringify({a: 1, b: 2}), headers: headers}, function (err, res) {
        expect(err).to.be(null);
        res = JSON.parse(res.toString());
        //res = JSON.parse(res.toString());
        expect(res).to.be.eql({a: '1', b : '2'});
        done();
      });
    });
    it('req.getPost() should return empty obj when query is a GET', function (done) {
      var url = 'http://localhost:54321/post';
      urllib.request(url, function (err, res) {
        expect(err).to.be(null);
        res = res.toString();
        //res = JSON.parse(res.toString());
        expect(res).to.be.eql('');
        done();
      });
    });

    it('req.preparePost() should return post obj  type cb', function (done) {
      var url = 'http://localhost:54321/preparePost/cb';
      var headers = {"content-type": 'application/x-www-form-urlencoded'};
      urllib.request(url, {type: 'POST', data: {a: 1, b: 2}, headers: headers}, function (err, res) {
        expect(err).to.be(null);
        res = res.toString();
        res = JSON.parse(res.toString());
        expect(res).to.be.eql({a: '1', b: '2'});
        done();
      });
    });
    it('req.preparePost() should return post obj type event', function (done) {
      var url = 'http://localhost:54321/preparePost/event';
      var headers = {"content-type": 'application/x-www-form-urlencoded'};
      urllib.request(url, {type: 'POST', data: {a: 1, b: 2}, headers: headers}, function (err, res) {
        expect(err).to.be(null);
        res = res.toString();
        res = JSON.parse(res.toString());
        expect(res).to.be.eql({a: '1', b: '2'});
        done();
      });
    });
    it('req.preparePost() should return post obj', function (done) {
      var url = 'http://localhost:54321/preparePost1';
      var headers = {"content-type": 'application/x-www-form-urlencoded'};
      urllib.request(url, {type: 'POST', data: {a: 1, b: 2}, headers: headers}, function (err, res) {
        expect(err).to.be(null);
        res = res.toString();
        res = JSON.parse(res.toString());
        expect(res).to.be.eql({a: '1', b: '2'});
        done();
      });
    });
    it('res.setCookie() should return 304 code and setCookie header', function (done) {
      var url = 'http://localhost:54321/setCookie';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        var sCode = res.statusCode;
        expect(sCode).to.be(304);
        expect(res.headers['set-cookie']).to.be.eql(['abc=123']);
        done();
      });
    });
    it('res.redirect() should return location header', function (done) {
      var url = 'http://localhost:54321/redirect';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        var sCode = res.statusCode;
        expect(sCode).to.be(302);
        expect(res.headers.location).to.be.eql('/abc');
        done();
      });
    });
    it('res.redirect() should return location header when domain allowed', function (done) {
      var url = 'http://localhost:54321/redirectAccess';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        var sCode = res.statusCode;
        expect(sCode).to.be(302);
        expect(res.headers.location).to.match(/http:\/\/taobao\.com/);
        done();
      });
    });
    it('res.redirect() should return location header when domain denial', function (done) {
      var url = 'http://localhost:54321/redirectDenial';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        var sCode = res.statusCode;
        expect(sCode).to.be(200);
        expect(data.toString()).to.match(/Redirect fail/);
        done();
      });
    });

    it('res.gzip() should return content with gzip type', function (done) {
      var url = 'http://localhost:54321/gzip';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        expect(res.headers['content-encoding']).to.be('gzip');
        var zlib = require('zlib');
        zlib.gunzip(data, function (err, data) {
          expect(err).to.be(null);
          expect(data.toString()).to.be('{"a":1}');
          done();
        });
      });
    });
    it('res.gzip() should return content with gzip type', function (done) {
      var url = 'http://localhost:54321/gzip_string';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        var zlib = require('zlib');
        zlib.gunzip(data, function (err, data) {
          expect(err).to.be(null);
          expect(data.toString()).to.be('abc');
          done();
        });
      });
    });
    it('double write cookie should just return the first cookie', function (done) {
      var url = 'http://localhost:54321/set_cookie_twice';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        expect(data.toString()).to.be('one');
        expect(res.headers['set-cookie']).to.be.eql(['a=1']);
        done();
      });
    });
    it('tpl render', function (done) {
      var url = 'http://localhost:54321/tpl';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        expect(data.toString()).to.be('success');
        done();
      });
    });
    it('res.render() with setHeader', function (done) {
      var url = 'http://localhost:54321/tplheader';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        expect(res.headers['content-type']).to.be('application/hello');
        expect(data.toString()).to.be('hello');
        done();
      });
    });
  });
  /*  formidable do not support chunk post
  describe('req.getPost() with chunk /testPostBody', function() {
    it('post stuff less then 2M should return ok ', function(done){
      var limit = 10;
      var str = 'abcdefghij';
      for (var i = 0 ; i < limit ; i ++) {
        str += str;
      }
      function cb_res(data) {
        expect(data).to.match(/ok/);
        done();
        client.end();
      }
      function cb_send(client) {
        client.write(genHeader(query));
        client.write(chunk('abc=' + str));
        setTimeout(function () {
          client.write(chunk(str));
          client.write(chunkEnd());
        });
      }
      var query = {
        method : 'POST',
        path : '/testPostBody',
        transferEncoding : true,
        contentType : 'application/x-www-form-urlencoded'
      };
      var client = netRequest(query, cb_send, cb_res);
    });
    it('post stuff more then 2M should return error testPostBody', function(done){
      var limit = 1024*512;
      var str = '';
      var abc = 'abcdefghij';
      for (var i = 0 ; i < limit ; i ++) {
        str += abc;
      }
      function cb_res(data) {
        expect(data).to.match(/error/);
        client.end();
        done();
      }
      function cb_send(client) {
        client.write(genHeader(query));
        client.write(chunk('abc=' + str));
        setTimeout(function () {
          client.write(chunk(str));
          client.write(chunkEnd());
        });
      }
      var query = {
        method : 'POST',
        path : '/testPostBody',
        transferEncoding : true,
        contentType : 'application/x-www-form-urlencoded'
      };
      var client = netRequest(query, cb_send, cb_res);
    });
  });
  */
  describe('req.getPost()  /postFile', function () {
    it('post stuff with content-length less then 10k  should return ok', function (done) {
      var limit = 1024 * 512;
      var str = [];
      var abc = 'abcdefghij';
      for (var i = 0 ; i < limit ; i ++) {
        str.push(abc);
      }
      upfile(str.join(''), function (data) {
        data = JSON.parse(data);
        expect(data.ff.size).to.be(limit * 10);
        done();
      });
    });
  });
  describe('req.dispatch()', function () {
    it('should return ok when query default action', function (done) {
      var url = 'http://localhost:54321/dispatch';
      urllib.request(url, function (err, data, res) {
        expect(err).to.be(null);
        expect(data.toString()).to.be('ok');
        done();
      });
    });
  });
});

function upfile(str, cb) {
  var form = formstream();
  var upstream = new Buffer(str);
  form.buffer('ff', upstream, 'cubeweb.tgz');
  form.setTotalStreamSize(upstream.length);
  var options = {
    method: 'POST',
    host: '127.0.0.1',
    port: 54321,
    path: '/postFile',
    headers: form.headers()
  };
  var req = HTTP.request(options, function (res) {
    var buff = '';
    res.on('data', function (data) {
      buff += data.toString();
    });
    res.on('end', function () {
      cb(buff);
    });
  });

  form.pipe(req);
}
/**
 * create a net request client
 * @param  {[type]} cb_send   [description]
 * @param  {[type]} cb_result [description]
 * @return {[type]}           [description]
 */
function netRequest(query, cb_send, cb_result) {
  var option = {
    host: "127.0.0.1",
    port: 54321
  };
  var client = net.connect(54321, "127.0.0.1", function () {
    cb_send(client);
  });
  var buffer = '';
  client.on('data', function (data) {
    buffer += data.toString();
    cb_result(buffer.split('\r\n\r\n')[1]);
  });
  client.on('end', function () {
  });
  return client;
}
/**
 * get header string
 * @param  {} obj [description]
 *    {
 *      method:
 *      path:
 *      host:
 *      cookie:
 *      userAgent
 *    }
 */
function genHeader(obj) {
  obj.host  = obj.host ? obj.host : '127.0.0.1';
  obj.method = obj.method ? obj.method : 'GET';
  obj.userAgent = obj.userAgent ? obj.userAgent : 'test/node.js';

  var arr = [];
  for (var i in obj) {
    switch (i) {
      case 'method':
        arr.push(obj.method + ' ' + obj.path + ' HTTP/1.1');
        break;
      case 'host':
        arr.push('Host: '+ obj.host + ':54321');
        break;
      case 'userAgent':
        arr.push('User-Agent: ' + obj.userAgent);
        break;
      case 'cookie':
        arr.push('Cookie: ' + obj.cookie);
        break;
      case 'referer':
        arr.push('Referer: ' + obj.referer);
        break;
      case 'transferEncoding' :
        arr.push('Transfer-Encoding: chunked');
        break;
      case 'contentType' :
        arr.push('Content-Type: ' + obj.contentType);
        break;
      case 'contentLength' :
        arr.push('Content-Length: ' + obj.contentLength);
        break;
    }
  }
  arr.push('Accept: text/plain, */*; q=0.01');
  if(obj.content){
    arr.push('\r\n' + obj.content);
  } else {
    arr.push('\r\n');
  }
  return arr.join('\r\n');
}
function chunk(str){
  return Buffer.byteLength(str).toString(16) + '\r\n' + str + '\r\n';
}
function chunkEnd(){
  return '0\r\n\r\n';
}
