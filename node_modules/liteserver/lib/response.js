/**
 * http response object patch
 *   add some functions to the native http.request.prototype
 */
var HTTP = require('http');
var Cookie = require('cookie');
var Zlib = require('zlib');

if (!HTTP.ServerResponse.prototype.__lite_server_patch) {
  HTTP.ServerResponse.prototype.__lite_server_patch = true;
  HTTP.ServerResponse.prototype.REDIRECT_ACCESS = {};
  var orig_storeHeader = HTTP.ServerResponse.prototype._storeHeader;
  /**
   * patch _storeHeader for setCookie
   * @return {[type]} [description]
   */
  HTTP.ServerResponse.prototype._storeHeader = function (firstLine, headers) {
    var origin;
    var cookie = this.__cookie;

    if (headers === undefined) {
      headers = {};
      origin = null;
    } else {
      origin = headers["set-cookie"];
    }

    if (cookie) {
      if (!origin) {
        // DO NOTHING
      } else if (Array.isArray(origin)) {
        cookie = cookie.concat(origin);
      } else if (origin) {
        cookie.push(origin);
      }
      headers["set-cookie"] = cookie;
    }
    orig_storeHeader.apply(this, [firstLine, headers]);
  };
  /**
   * setCookie
   * @param {String} name    cookieName
   * @param {String} value   cookieValue
   * @param {Object} options {expire,domain,httponly}
   */
  HTTP.ServerResponse.prototype.setCookie = function (name, value, options) {
    if (!this.__cookie) {
      this.__cookie = [];
    }
    this.__cookie.push(Cookie.serialize(name, value, options));
  };
  /**
   * done , res.end()
   * @param  {String|Buffer} str    http body content
   * @param  {Number} code   http code
   * @param  {Encode} encode content encoding
   */
  HTTP.ServerResponse.prototype.done = function (str, code, encode) {
    this.statusCode = code ? code : 200;
    if (!this.getHeader('Content-Type')) {
      this.setHeader('Content-Type', 'text/html; charset=utf-8');
    }
    this.end(str, encode);
    this.emit('end');
  };
  /**
   * redirect the request
   * @param  {String} path a url path
   */
  HTTP.ServerResponse.prototype.redirect = function (path) {
    var domainExp = /^https?:\/\/([^\/]+)*/;
    var domain;
    if (path && this.REDIRECT_ACCESS !== '*') {
      path = path.trim();
      domain = path.match(domainExp);
      if (domain && !this.REDIRECT_ACCESS[domain[1]]) {
        return this.end('Redirect fail because of untrust domain : ' + domain[1]);
      }
    }
    this.setHeader('location', path);
    this.statusCode = 302;
    this.end('');
  };
  /**
   * render template
   * @param  {String} tpl    template path
   * @param  {Object} object template object
   */
  HTTP.ServerResponse.prototype.render = function (tpl, object) {
    var cnt;
    // if ! content-type , set default
    if (!this.getHeader('Content-Type')) {
      this.setHeader('Content-Type', 'text/html; charset=utf-8');
    }
    try {
      cnt = this.__view.render(tpl, object);
    } catch (e) {
      throw new Error('liteserver render error', tpl, e.stack);
    }
    this.end(cnt);
  };
  /**
   * res.end with mime text/plain
   * @param  {String|Buffer} text http response body
   */
  HTTP.ServerResponse.prototype.text = function (text) {
    this.setHeader('Content-Type', 'text/plain; charset=utf-8');
    this.end(text);
  };
  /**
   * res.end with gzip
   * if the output object is a stream , pipe way is more efficient
   * @param  {Object|String} object or string
   */
  HTTP.ServerResponse.prototype.gzip = function (object) {
    var self = this;
    this.setHeader('Content-Encoding', 'gzip');
    if (typeof object === 'object') {
      this.setHeader('Content-Type', 'application/json; charset=utf-8');
      object = JSON.stringify(object);
    } else {
      if (!this.getHeader('Content-Type')) {
        this.setHeader('Content-Type', 'text/plain; charset=utf-8');
      }
    }
    Zlib.gzip(new Buffer(object), function (err, data) {
      if (err) {
        throw new Error('liteserver gzip error', object);
      }
      self.end(data);
    });
  };
  /**
   * res.end with json mime application/json; charset=utf-8
   * @param  {[type]} object [description]
   * @return {[type]}        [description]
   */
  HTTP.ServerResponse.prototype.json = function (object) {
    // header
    this.setHeader('Content-Type', 'application/json; charset=utf-8');
    this.end(JSON.stringify(object));
  };
  HTTP.ServerResponse.prototype.jsonp = function (vars, object) {
    // header
    this.setHeader('Content-Type', 'application/javascript; charset=utf-8');
    // avoid xss inject
    vars = encodeURIComponent(vars);
    this.end(vars + '(' + JSON.stringify(object) + ');');
  };
}