/**
 * http request object patch
 *   add some functions to the native http.request.prototype
 */
var HTTP = require('http');
var QS = require('querystring');
var Cookie = require('cookie');
var Server = require('./server');
var Formidable = require('formidable');

function _defaultHandler (req, res) {
  res.done('$default handler is undefined!');
}

if (!HTTP.IncomingMessage.prototype.__lite_server_patch) {
  HTTP.IncomingMessage.prototype.__lite_server_patch = true;
  /**
   * getRouter get the router object
   * this function can be override by  server.setRouter(fn);
   * @return {Object} the router object
   */
  HTTP.IncomingMessage.prototype.getRouter = function () {
    var query = this.__querypath;
    if (typeof query !== 'string') {
      return query;
    }
    var arr = query.split('/');
    var ctrl = arr[1];
    var action = arr[2];
    this.__querypath = {
      controller: ctrl,
      action : action,
      param : arr.slice(3)
    };
    return this.__querypath;
  };
  /**
   * dispatch request
   * @param  {String} action     actionName
   * @param  {Object} actions {$default:function(req,res,config){}}
   *      object actions's key start with $
   */
  HTTP.IncomingMessage.prototype.dispatch = function (action, actions) {
    var act = '$' + action;
    var handler = actions[act];
    if (!handler) {
      handler = actions.$default;
      if (!handler) {
        handler = _defaultHandler;
      }
    }
    var res = this.__res;
    var config = this.__config;
    handler(this, res, config);
    this.__res = null;
    this.__config = null;
  };
  /**
   *  getCookie()
   *  获取httpcookie
   * @param  {String} name cookieName 可以为空，为空时取出整个对象
   * @return {String|Object}
   */
  HTTP.IncomingMessage.prototype.getCookie = function (name) {
    var cookie = this.__cookie;
    if (!cookie) {
      cookie = this.headers.cookie;
      if (cookie) {
        cookie = Cookie.parse(cookie);
      } else {
        cookie = {};
      }
      // cache the parsed cookie
      this.__cookie = cookie;
    }
    return name ? cookie[name] : cookie;
  };
  /**
   * getCookieRaw description
   * @return {String} the raw cookie from http request header
   */
  HTTP.IncomingMessage.prototype.getCookieRaw = function () {
    var rawCookie = this.headers.cookie;
    return rawCookie ? rawCookie : '';
  };
  /**
   * getPost data from request, async call
   * @param  {Function} cb      [description]
   * @example
   *    req.on('post',function(postData){});
   *    req.getPost();
   *
   *  or
   *    req.getPost(function(postData){
   *      // DO SOMETHING HERE
   *    });
   */
  HTTP.IncomingMessage.prototype.getPost = function (cb) {
    var self = this;
    if (this.method !== 'POST') {
      if (cb) {
        return cb(null);
      } else {
        return self.emit('post', null);
      }
    }
    // post content already parsed
    if (this.__prepare_post === 2) {
      process.nextTick(function () {
        if (cb) {
          cb(self.__post_err, self.__post_buf_fields, self.__post_buf_files);
        } else {
          self.emit('post', self.__post_err, self.__post_buf_fields, self.__post_buf_files);
        }
      });
    // posting
    } else {
      if (cb) {
        this.once('__post', cb);
      } else {
        this.once('__post', function () {
          this.emit('post', this.__post_err, this.__post_buf_fields, this.__post_buf_files);
        });
      }
      this.preparePost();
    }
  };
  /**
   * 由于http模块暂时不支持pause，所以有异步的情况，请先调用这个接口
   * @return {[type]} [description]
   */
  HTTP.IncomingMessage.prototype.preparePost = function () {
    var self = this;
    if (this.__prepare_post !== undefined) {
      return;
    }
    // flag prepare_post
    this.__prepare_post = 1;
    // if not post
    if (this.method !== 'POST') {
      return;
    }
    var form = new Formidable.IncomingForm({
      maxFields: this.MAX_POST_FIELDS,
      maxFieldsSize: this.MAX_POST_FIELDSSIZE,
      uploadDir: this.POST_TMP_DIR
    });
    form.parse(this, function (err, fields, files) {
      self.__post_buf_fields = fields;
      self.__post_buf_files = files;
      self.__post_err = err;
      self.__prepare_post = 2;
      self.emit('__post', err, fields, files);
    });
  };

  /**
   * get Query string param
   * @public
   * @return {Object} http get param
   */
  HTTP.IncomingMessage.prototype.getQuery = function () {
    if (!this.__querystr) return {};
    if (typeof this.__querystr === 'string') {
      this.__querystr = QS.parse(this.__querystr);
    }
    return this.__querystr;
  };
}